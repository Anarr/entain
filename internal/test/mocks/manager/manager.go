// Code generated by mockery v2.15.0. DO NOT EDIT.

package mockedmanager

import (
	model "github.com/Anarr/entain/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CancelRequests provides a mock function with given fields: limit
func (_m *Manager) CancelRequests(limit int) error {
	ret := _m.Called(limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitDefaultUser provides a mock function with given fields:
func (_m *Manager) InitDefaultUser() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessRequest provides a mock function with given fields: request
func (_m *Manager) ProcessRequest(request model.Request) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Request) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManager(t mockConstructorTestingTNewManager) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
